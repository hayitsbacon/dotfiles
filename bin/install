#!/bin/bash
set -e 
set -o pipefail 

export DEBIAN_FRONTEND=noninteractive

get_user() {
	if [[ -z "${TARGET_USER-}" ]]; then
		mapfile -t options < <(find /home/* -maxdepth 0 -printf "%f\\n" -type d)
		# if there is only one option just use that user
		if [ "${#options[@]}" -eq "1" ]; then
			readonly TARGET_USER="${options[0]}"
			echo "Using user account: ${TARGET_USER}"
			return
		fi

		# iterate through the user options and print them
		PS3='command -v user account should be used? '

		select opt in "${options[@]}"; do
			readonly TARGET_USER=$opt
			break
		done
	fi
}

check_is_sudo() {
	if [ "$EUID" -ne 0 ]; then
		echo "Please run as root."
		exit
	fi
}

# setup sudo for a user
# because fuck typing that shit all the time
# just have a decent password
# and lock your computer when you aren't using it
# if they have your password they can sudo anyways
# so its pointless
# i know what the fuck im doing ;)
setup_sudo() {
	# add user to sudoers
	adduser "$TARGET_USER" sudo

	# add user to systemd groups
	# then you wont need sudo to view logs and shit
	gpasswd -a "$TARGET_USER" systemd-journal
	gpasswd -a "$TARGET_USER" systemd-network

	# create docker group
	sudo groupadd docker
	sudo gpasswd -a "$TARGET_USER" docker

	# add go path to secure path
	{ \
		echo -e "Defaults	secure_path=\"/usr/local/go/bin:/home/${TARGET_USER}/.go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/share/bcc/tools:/home/${TARGET_USER}/.cargo/bin\""; \
		echo -e 'Defaults	env_keep += "ftp_proxy http_proxy https_proxy no_proxy GOPATH EDITOR"'; \
		echo -e "${TARGET_USER} ALL=(ALL) NOPASSWD:ALL"; \
		echo -e "${TARGET_USER} ALL=NOPASSWD: /sbin/ifconfig, /sbin/ifup, /sbin/ifdown, /sbin/ifquery"; \
	} >> /etc/sudoers

	# setup downloads folder as tmpfs
	# that way things are removed on reboot
	# i like things clean but you may not want this
	# mkdir -p "/home/$TARGET_USER/Downloads"
	# echo -e "\\n# tmpfs for downloads\\ntmpfs\\t/home/${TARGET_USER}/Downloads\\ttmpfs\\tnodev,nosuid,size=50G\\t0\\t0" >> /etc/fstab
}

setup_sources_min() {
    apt update || true
    apt install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        dirmngr \
        gnupg2 \
        lsb-release \
        git \
        --no-install-recommends

	# turn off translations, speed up apt update
	mkdir -p /etc/apt/apt.conf.d
	echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/99translations
}

setup_sources() {
    setup_sources_min
}

install_min() {
    apt update || true
    apt upgrade -y 

    apt install -y \
        adduser \
        automake \
        bash-completion \
        bzip2 \
        coreutils \
        dnsutils \
        file \
        findutils \
        gcc \
        git \
        gnupg \
        gnupg2 \
        grep \
        gzip \
        hostname \
        htop \
        indent \
        iptables \
        jq \
        less \
        lsof \
        make \
        mount \
        net-tools \
        openssh-client \
        openssh-server \
        strace \
        sudo \
        tar \
        tree \
        tzdata \
        unzip \
        vim \
        zip \
        --no-install-recommends

    apt autoremove -y
    apt autoclean -y
    apt clean -y
}

install_base() {
    install_min;

    apt update || true
    apt upgrade -y

    setup_sudo

    apt autoremove -y
    apt autoclean -y
    apt clean -y
}

install_toys() {
    apt update || true
    apt install -y \
        figlet \
        cowsay \
        fortune-mod \
        fortunes \
        fortunes-off \
        cmatrix \
        sl
    
    # install lolcat
	curl -sSL https://raw.githubusercontent.com/tehmaze/lolcat/master/lolcat > /usr/local/bin/lolcat
	chmod +x /usr/local/bin/lolcat
        
}

# install/update golang from source
install_golang() {
	export GO_VERSION
	GO_VERSION=$(curl -sSL "https://golang.org/VERSION?m=text")
	export GO_SRC=/usr/local/go

	# if we are passing the version
	if [[ -n "$1" ]]; then
		GO_VERSION=$1
	fi

	# purge old src
	if [[ -d "$GO_SRC" ]]; then
		sudo rm -rf "$GO_SRC"
		sudo rm -rf "$GOPATH"
	fi

	GO_VERSION=${GO_VERSION#go}

	# subshell
	(
	kernel=$(uname -s | tr '[:upper:]' '[:lower:]')
	curl -sSL "https://storage.googleapis.com/golang/go${GO_VERSION}.${kernel}-amd64.tar.gz" | sudo tar -v -C /usr/local -xz
	local user="$USER"
	# rebuild stdlib for faster builds
	sudo chown -R "${user}" /usr/local/go
	CGO_ENABLED=0 go install -a -installsuffix cgo std
	)

	# get commandline tools
	(
	set -x
	set +e
	go get github.com/genuinetools/weather

	# Tools for vimgo.
	go get github.com/jstemmer/gotags
	go get github.com/nsf/gocode
	go get github.com/rogpeppe/godef
    )

	# symlink weather binary for motd
	sudo ln -snf "${GOPATH}/bin/weather" /usr/local/bin/weather
}

install_python() {
    local python="python3.9"
    local pypath="/home/$TARGET_USER/.venv"
    apt update || true
    apt install -y \
        "$python" \
        "$python-dev" \
        "$python-venv" \
        --no-install-recommends

    sudo -u $TARGET_USER $python -m venv $pypath
    sudo -u $TARGET_USER "$pypath/bin/pip" install \
        jupyterlab \
        pandas \
        numpy \
        requests
    if [[ ! -f "/home/$TARGET_USER/.jupyter/jupyter_notebook_config.py" ]]; then
        sudo -u $TARGET_USER "$pypath/bin/jupyter" --generate-config
    fi
}

setup_dotflies() {
    (
    cd
    if [[ ! -d ".dotfiles" ]]; then
        git clone https://github.com/hayitsbacon/dotfiles .dotfiles
    fi

    cd .dotfiles
    make
    )
}

usage() {
    echo "#    This script installs my basic setup for a Debian-based system"
    echo "# Usage:"
    echo "#    install <command>"
    echo "# Commands:"
    echo "#   base        - setup sources.list & install base packages"
    echo "#   cluster     - setup cluster tools"
    echo "#   dotfiles    - setup dotfiles"
    echo "#   min         - setup sources.list & install minimum base packages"
    echo "#   python      - setup python development tools"
    echo "#   golang      - setup golang development tools"
    echo "#   scripts     - setup customization scripts"
    echo "#   toys        - setup fun toys"
    echo "#   vim         - setup .vimconfig"
}

main() {
    local cmd=$1

    if [[ -z "$cmd" ]]; then
        usage
        exit 1
    fi

    if [[ $cmd == "base" ]]; then
        check_is_sudo
        get_user
        setup_sources
        install_base
    elif [[ $cmd == "dotfiles" ]]; then
        setup_dotflies
    elif [[ $cmd == "min" ]];then
        check_is_sudo
        setup_sources_min
        install_min
    elif [[ $cmd == "python" ]]; then
        check_is_sudo
        get_user
        install_python
    elif [[ $cmd == "golang" ]]; then
        install_golang
    elif [[ $cmd == "toys" ]]; then
        check_is_sudo
        install_toys
    else
        usage

    fi
}

main "$@"
